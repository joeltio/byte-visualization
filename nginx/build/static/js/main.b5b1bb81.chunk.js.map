{"version":3,"sources":["Table.js","App.js","serviceWorker.js","index.js"],"names":["RecentCommits","className","style","height","width","keyField","data","this","props","columns","striped","React","Component","defaultProps","HOURS","INTERVALS","ROUTES","TITLES","routeInt","toDateFormat","isoFormat","slice","replace","postDataGenerator","index","start","Date","end","setHours","getHours","start_date","toISOString","end_date","intervals","App","state","layout","title","responsive","xaxis","yaxis","x","y","type","tableData","tableColumn","dataField","text","sort","testClick","handleClick","bind","console","log","interval","setInterval","tick","changeSeconds","clearInterval","routeIndex","fetch","method","headers","Accept","body","JSON","stringify","response","ok","Error","statusText","json","parseGenerics","temp","i","logs","length","push","id","name","repoName","commitMessage","setState","partialKey","commitsKey","commitsInfo","time_intervals","Object","keys","forEach","tempName","tempX","tempY","mode","prevState","getGraphData","render","useResizeHandler","onClick","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5b1bb81.chunk.js","sourcesContent":["import React from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport PropTypes from 'prop-types';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\n\nexport default class RecentCommits extends React.Component {\n  render() {\n    return (\n      <div className=\"column is-half\">\n        <h1>Recent Commits</h1>\n        <BootstrapTable style={{ height: '800px', width: '600px' }} keyField=\"id\" data={this.props.data} columns={this.props.columns} striped />\n      </div>\n    );\n  }\n}\n\nRecentCommits.propTypes = {\n  data: PropTypes.array,\n  columns: PropTypes.array,\n};\n\nRecentCommits.defaultProps = {\n  data: [],\n  columns: [],\n};\n","import React from 'react';\nimport Plot from 'react-plotly.js';\nimport RecentCommits from './Table';\nimport 'bulma/css/bulma.min.css';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst HOURS = 3;\nconst INTERVALS = 8;\nconst TABLE_AMOUNT = 15;\n\n// Global variables that will be used\nconst ROUTES = [\n  'http://localhost:8080/commits/users',\n  'http://localhost:8080/commits/users',\n  'http://localhost:8080/commits/repos',\n  'http://localhost:8080/commits/repos',\n  `http://localhost:8080/commit-tags/${TABLE_AMOUNT}`,\n];\n\nconst TITLES = [\n  `User Commits Over Time - ${HOURS} hours`,\n  'User Commits - Recent Hour',\n  `Repository Commits Over Time - ${HOURS} hours`,\n  'Repository Commits Over Time - Recent Hour',\n  'Recent Commits',\n];\n\nconst changeSeconds = 10;\nlet routeInt = 0;\n\n// Utility functions\nfunction toDateFormat(isoFormat) {\n  return isoFormat.slice(0, 19).replace('T', ' ');\n}\n\nfunction postDataGenerator(index) {\n  const start = new Date();\n  const end = new Date();\n  if (index === 0 || index === 2) { // Over {HOURS} hours\n    // + 8 as ISO String returns ISO Standard, while Singapore is GMT+8\n    start.setHours(start.getHours() - HOURS + 8);\n    end.setHours(end.getHours() + 8);\n    return {\n      start_date: toDateFormat(start.toISOString()),\n      end_date: toDateFormat(end.toISOString()),\n      intervals: INTERVALS,\n    };\n  }\n  if (index === 1 || index === 3) { // Recent Hour\n    // + 8 as ISO String returns ISO Standard, while Singapore is GMT+8\n    start.setHours(start.getHours() - 1 + 8);\n    end.setHours(end.getHours() + 8);\n    return {\n      start_date: toDateFormat(start.toISOString()),\n      end_date: toDateFormat(end.toISOString()),\n      intervals: 1,\n    };\n  }\n  return 0;\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      layout: {\n        title: 'Starting title',\n        responsive: true,\n        xaxis: {\n          title: 'Time',\n        },\n        yaxis: {\n          title: 'Number of commits',\n        },\n      },\n      data: [{\n        x: ['girafees', 'orangutans', 'monkeys'],\n        y: [20, 14, 23],\n        type: 'bar',\n      }],\n      tableData: [],\n      tableColumn: [{\n        dataField: 'id',\n        text: 'No.',\n        sort: true,\n      }, {\n        dataField: 'name',\n        text: 'Name',\n        sort: true,\n      }, {\n        dataField: 'repoName',\n        text: 'Repository Name',\n        sort: true,\n      }, {\n        dataField: 'commitMessage',\n        text: 'Commit Message',\n      }],\n    };\n\n    // event handler binds\n    this.testClick = this.handleClick.bind(this);\n  }\n\n  // When the component is mounted, start the interval with a tick of every second\n  // It will also start the async function getGraphData\n  componentDidMount() {\n    console.log('Mounted');\n\n    this.interval = setInterval(() => this.tick(), changeSeconds * 1000);\n  }\n\n  componentWillUnmount() {\n    // To avoid memory leaking issues, clear the interval that is set\n    // during componentDidMount\n    clearInterval(this.interval);\n  }\n\n  // routeIndex here refers to the index, routeInt -> declared in the global scope\n  // will be passed through here\n  async getGraphData(routeIndex) {\n    try {\n      const response = await fetch(ROUTES[routeIndex],\n        {\n          method: 'POST',\n          headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(postDataGenerator(routeIndex)),\n        });\n\n      // If the fetch function immediately throws a error\n      // Probably a 404 of such, throw an error for debugging purposes\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      const json = await response.json();\n\n      console.log(`Currently the index is ${routeIndex} which heres to ${ROUTES[routeIndex]}`);\n      // Parse result differently based on the different apis being used\n      if (routeIndex === 0 || routeIndex === 1) {\n        this.parseGenerics(json, 'user');\n      } else if (routeIndex === 2 || routeIndex === 3) {\n        this.parseGenerics(json, 'repo');\n      } else if (routeIndex === 4) {\n        const temp = [];\n        for (let i = 0; i < json.logs.length; i++) {\n          temp.push({\n            id: i,\n            name: json.logs[i][0],\n            repoName: json.logs[i][1],\n            commitMessage: json.logs[i][2],\n          });\n        }\n\n        this.setState({\n          tableData: temp,\n        });\n      }\n    } catch (error) { // Attempt to catch any problems while fetching resource\n      console.log(error);\n    }\n\n    // Add a count to routeInt at the end of every iteration\n    // This also resets it to 0 when it is over the amount the length of the array\n    if (routeInt === (ROUTES.length - 1)) {\n      routeInt = 0;\n    } else {\n      routeInt++;\n    }\n  }\n\n  parseGenerics(json, partialKey) {\n    const temp = [];\n    // Hacky generics key parsing\n    // as they are consistent in key names except for [users/repos]\n    const commitsKey = partialKey + '_commits';\n    const commitsInfo = partialKey + '_info';\n\n    // for Line graph\n    if (json.time_intervals.length > 1) {\n      Object.keys(json[commitsKey]).forEach((id) => {\n        // Name of each graph, labelled through the legend\n        const tempName = json[commitsInfo][id];\n        // x-axis is the time\n        const tempX = json.time_intervals;\n        // y-axis is the amount of commits\n        const tempY = json[commitsKey][id];\n        temp.push({\n          name: tempName,\n          x: tempX,\n          y: tempY,\n          type: 'scatter',\n          mode: 'lines+markers',\n        });\n      });\n    } else { // Bar chart\n      const tempX = [];\n      const tempY = [];\n      Object.keys(json[commitsKey]).forEach((id) => {\n        // Name of the person's (id)\n        tempX.push(json[commitsInfo][id]);\n        // Data of the person's (id)\n        tempY.push(json[commitsKey][id][0]);\n      });\n\n      temp.push({\n        x: tempX,\n        y: tempY,\n        type: 'bar',\n      });\n    }\n\n    // Set state of the graph data\n    this.setState({\n      data: temp,\n    });\n\n    // Separately set state of the layout title\n    this.setState((prevState) => ({\n      layout: { // object that we want to update\n        ...prevState.layout, // keep all other key-value pairs\n        title: TITLES[routeInt], // update the value of specific key\n      },\n    }));\n  }\n\n  tick() {\n    // This is used for when the interval that was set was for one second\n    // this.setState((prevState) => ({\n    //   // changeSeconds + 1 as original state is 1\n    //   // This is because 0 / n == 0\n    //   // To avoid having it be infinitely 0, og. value is set to 0\n    //   seconds: prevState.seconds % (changeSeconds + 1) === 0 ? 1 : prevState.seconds + 1,\n    // }));\n\n    // Run the getGraphData Function every iteration of tick()\n    this.getGraphData(routeInt);\n  }\n\n  handleClick(index) {\n    routeInt = index;\n    this.getGraphData(routeInt);\n  }\n\n  render() {\n    let render;\n    if (routeInt !== ROUTES.length - 1) {\n      render = <Plot data={this.state.data} layout={this.state.layout} style={{ height: '100%', width: '100%' }} useResizeHandler />;\n    } else {\n      render = <RecentCommits data={this.state.tableData} columns={this.state.tableColumn} />;\n    }\n    return (\n      // id=main is set here to flex the children in this div\n      // so that are side by side\n      <div id=\"main\" className=\"is-mobile is-centered\">\n        <div className=\"tabs is-fullwidth is-toggle\">\n          <ul>\n            <li className={routeInt === 0 && 'is-active'}>\n              <a onClick={() => this.handleClick(0)}>User Commits Over Time - {HOURS} hours </a>\n            </li>\n            <li className={routeInt === 1 && 'is-active'}>\n              <a onClick={() => this.handleClick(1)}>User Commits - Recent hour</a>\n            </li>\n            <li className={routeInt === 2 && 'is-active'}>\n              <a onClick={() => this.handleClick(2)}>Repository Commits Over Time - {HOURS} hours </a>\n            </li>\n            <li className={routeInt === 3 && 'is-active'}>\n              <a onClick={() => this.handleClick(3)}>Repository Commits Over Time</a>\n            </li>\n            <li className={routeInt === 4 && 'is-active'}>\n              <a onClick={() => this.handleClick(4)}>Recent Commits</a>\n            </li>\n          </ul>\n        </div>\n        <div style={{ height: '90vh' }}>\n          {render}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}